tabela_ca_2000_2017_vcon = arrumar_tabelas(tabela_ca_2000_2017, tabela_ca_2000_2017_vcon, 11:19)
pib_a_vcon_2000_2017 = separa_colunas('Período', 'PIB', tabela_ca_2000_2017_vcon)
consumo_familias_a_vcon_2000_2017 = separa_colunas('Período', 'Consumo das Famílias', tabela_ca_2000_2017_vcon)
consumo_governo_a_vcon_2000_2017 = separa_colunas('Período', 'Consumo do Governo', tabela_ca_2000_2017_vcon)
fbkf_a_vcon_2000_2017 = separa_colunas('Período', 'Formação Bruta de Capital Fixo', tabela_ca_2000_2017_vcon)
export_a_vcon_2000_2017 = separa_colunas('Período', 'Exportação', tabela_ca_2000_2017_vcon)
import_a_vcon_2000_2017 = separa_colunas('Período', 'Importação', tabela_ca_2000_2017_vcon)
absorv_dom_a_vcon_2000_2017 = separa_colunas('Período', 'Absorção Doméstica', tabela_ca_2000_2017_vcon)
pib_a_vcon_2000_2017 = separa_colunas('Período', 'PIB', tabela_ca_2000_2017_vcon)
View(tabela_ca_2000_2017_vcon)
pib_a_vcon_2000_2017 = separa_colunas('Período', 'PIB = PIB a preços do ano anterior', tabela_ca_2000_2017_vcon)
#Deflatores com valores constantes
px = export_a_vcorr_2000_2017[,-1] / export_a_vcon_2000_2017[,-1]
px = data.frame(export_a_vcorr_2000_2017[,1], px)
pm = import_a_vcorr_2000_2017[,-1] / import_a_vcon_2000_2017[,-1]
pm = data.frame(import_a_vcorr_2000_2017[,1], pm)
pa = absorv_dom_a_vcorr_2000_2017[,-1] / absorv_dom_a_vcon_2000_2017[,-1]
pa = data.frame(absorv_dom_a_vcorr_2000_2017[,1], pa)
p_pib = pib_a_vcorr_2000_2017[,-1] / pib_a_vcon_2000_2017
p_pib = data.frame(pib_a_vcorr_2000_2017[,1], p_pib)
saa = absorv_dom_a_vcorr_2000_2017[,-1] / pib_a_vcorr_2000_2017[,-1]
saa = data.frame(absorv_dom_a_vcorr_2000_2017[,1], saa)
p_pib_saa = p_pib[,-1] * saa[,-1]
p_pib_saa = data.frame(p_pib[,1], p_pib_saa)
sx = export_a_vcorr_2000_2017[,-1] / pib_a_vcorr_2000_2017[,-1]
sx = data.frame(export_a_vcorr_2000_2017[,1], sx)
sm = (import_a_vcorr_2000_2017[,-1] / pib_a_vcorr_2000_2017[,-1])*-1
sm = data.frame(import_a_vcorr_2000_2017[,1], sm)
sxpx_smpx = (sx[,-1]/px[,-1]) - (sm[,-1]/pm[,-1])
sxpx_smpx = data.frame(sx[,1] , sxpx_smpx)
pa_calc = p_pib_saa[,-1] / (1 - p_pib[,-1] * sxpx_smpx[,-1])
pa_calc = data.frame(p_pib_saa[,1], pa_calc)
colnames(pa_calc) = c("Período", "Pa calculado")
p_tradables_mgeo = data.frame(px$Período ,sqrt(px$Exportação * pm$Importação))
colnames(p_tradables_mgeo) = c("Período", "P_tradables (m.geo)")
p_relativos = p_tradables_mgeo[,-1] / pa[,-1]
p_relativos = data.frame(px[,1], p_relativos)
prt_pa_calc = p_tradables_mgeo[,-1] / pa_calc[,-1]
prt_pa_calc = data.frame(p_tradables_mgeo[,1] , prt_pa_calc)
var_pib_1 = pib_a_vcorr_2000_2017[,1]
for (i in 2:dim(pib_a_vcorr_2000_2017)[1]){
var_pib_1[i,2] = pib_a_vcon_2000_2017[i,-1] / pib_a_vcorr_2000_2017[i-1,-1]
}
tt = px[,-1] / pm[,-1]
tt = data.frame(px[,1], tt)
x_m = export_a_vcorr_2000_2017[,-1] + import_a_vcorr_2000_2017[,-1]
x_m = data.frame(export_a_vcorr_2000_2017[,1] , x_m)
x_m_pa = x_m[,-1] / pa[,-1]
x_m_pa = data.frame(x_m[,1], x_m_pa)
x_px = export_a_vcorr_2000_2017[,-1] / px[,-1]
x_px = data.frame(export_a_vcorr_2000_2017[,1], x_px)
m_pm = -import_a_vcorr_2000_2017[,-1] / pm[,-1]
m_pm = data.frame(import_a_vcorr_2000_2017[,1], m_pm)
xpx_mpm = x_px[,-1] - m_pm[,-1]
xpx_mpm = data.frame(x_px[,1], xpx_mpm)
gc = x_m_pa[,-1] - xpx_mpm[,-1]
gc = data.frame(x_m_pa[,1], gc)
gc_pib = gc[,-1] / pib_a_vcon_2000_2017[,-1]
gc_pib = data.frame(gc[,1], gc_pib)
rib_p_anoanterior = gc[,-1] + pib_a_vcon_2000_2017[,-1]
rib_p_anoanterior = data.frame(gc[,1], rib_p_anoanterior)
var_rib_1 = pib_a_vcorr_2000_2017[,1]
for (i in 2:dim(pib_a_vcorr_2000_2017)[1]){
var_rib_1[i,2] = rib_p_anoanterior[i,-1] / pib_a_vcorr_2000_2017[i-1,-1]
}
ind_pib = var_pib_1[,1]
for (i in 2:dim(var_pib_1)[1]){
ind_pib[1,2] = 100
ind_pib[i,2] = ind_pib[i-1,2]*var_pib_1[i,2]
}
ind_rib = var_rib_1[,1]
for (i in 2:dim(var_rib_1)[1]){
ind_rib[1,2] = 100
ind_rib[i,2] = ind_rib[i-1,2]*var_rib_1[i,2]
}
ind_rib_pib = (ind_rib[,-1] / ind_pib[,-1])*100
ind_rib_pib = data.frame(ind_rib[,1], ind_rib_pib)
p_pib = pib_a_vcorr_2000_2017[,-1] / pib_a_vcon_2000_2017
p_pib = data.frame(pib_a_vcorr_2000_2017[,1], p_pib)
p_pib = pib_a_vcorr_2000_2017[,-1] / pib_a_vcon_2000_2017
p_pib = data.frame(pib_a_vcorr_2000_2017[,1], p_pib)
p_pib = pib_a_vcorr_2000_2017[,-1] / pib_a_vcon_2000_2017
View(pib_a_vcon_2000_2017)
View(pib_a_vcorr_2000_2017)
p_pib = pib_a_vcorr_2000_2017[,-1] / pib_a_vcon_2000_2017 [,-1]
p_pib = data.frame(pib_a_vcorr_2000_2017[,1], p_pib)
saa = absorv_dom_a_vcorr_2000_2017[,-1] / pib_a_vcorr_2000_2017[,-1]
saa = data.frame(absorv_dom_a_vcorr_2000_2017[,1], saa)
p_pib_saa = p_pib[,-1] * saa[,-1]
p_pib_saa = data.frame(p_pib[,1], p_pib_saa)
sx = export_a_vcorr_2000_2017[,-1] / pib_a_vcorr_2000_2017[,-1]
sx = data.frame(export_a_vcorr_2000_2017[,1], sx)
_2000_2017[,-1])*-1
sm = data.frame(import_a_vcorr_2000_2017[,1], sm)
sm = (import_a_vcorr_2000_2017[,-1] / pib_a_vcorr_2000_2017[,-1])*-1
sm = data.frame(import_a_vcorr_2000_2017[,1], sm)
sxpx_smpx = (sx[,-1]/px[,-1]) - (sm[,-1]/pm[,-1])
sxpx_smpx = data.frame(sx[,1] , sxpx_smpx)
pa_calc = p_pib_saa[,-1] / (1 - p_pib[,-1] * sxpx_smpx[,-1])
pa_calc = data.frame(p_pib_saa[,1], pa_calc)
colnames(pa_calc) = c("Período", "Pa calculado")
p_tradables_mgeo = data.frame(px$Período ,sqrt(px$Exportação * pm$Importação))
colnames(p_tradables_mgeo) = c("Período", "P_tradables (m.geo)")
p_tradables_mgeo = data.frame(px$Período ,sqrt(px$Exportação * pm$Importação))
colnames(p_tradables_mgeo) = c("Período", "P_tradables (m.geo)")
p_tradables_mgeo = data.frame(px$Período ,sqrt(px$Exportação * pm$Importação))
colnames(p_tradables_mgeo) = c("Período", "P_tradables (m.geo)")
p_tradables_mgeo = data.frame(px$Período ,sqrt(px$Exportação * pm$Importação))
colnames(p_tradables_mgeo) = c("Período", "P_tradables (m.geo)")
p_tradables_mgeo = data.frame(px$Período ,sqrt(px$Exportação * pm$Importação))
colnames(p_tradables_mgeo) = c("Período", "P_tradables (m.geo)")
p_tradables_mgeo = data.frame(px$Período ,sqrt(px$Exportação * pm$Importação))
colnames(p_tradables_mgeo) = c("Período", "P_tradables (m.geo)")
p_tradables_mgeo = data.frame(px$Período ,sqrt(px$Exportação * pm$Importação))
colnames(p_tradables_mgeo) = c("Período", "P_tradables (m.geo)")
View(p_tradables_mgeo)
p_tradables_mgeo = data.frame(px$Período ,sqrt(px$Exportação * pm$Importação))
px$Período
View(px)
px$Período
#Deflatores com valores constantes
px = export_a_vcorr_2000_2017[,-1] / export_a_vcon_2000_2017[,-1]
px = data.frame(export_a_vcorr_2000_2017[,1], px)
p_relativos = p_tradables_mgeo[,-1] / pa[,-1]
p_relativos = data.frame(px[,1], p_relativos)
View(export_a_vcorr_2000_2017)
colnames(px) = c('Período', 'Px')
View(px)
View(p_pib_saa)
View(p_pib)
p_tradables_mgeo = data.frame(px$Período ,sqrt(px$Px * pm$Pm))
colnames(p_tradables_mgeo) = c("Período", "P_tradables (m.geo)")
px = export_a_vcorr_2000_2017[,-1] / export_a_vcon_2000_2017[,-1]
px = data.frame(export_a_vcorr_2000_2017[,1], px)
colnames(px) = c('Período', 'Px')
pm = import_a_vcorr_2000_2017[,-1] / import_a_vcon_2000_2017[,-1]
pm = data.frame(import_a_vcorr_2000_2017[,1], pm)
colnames(pm) = c('Período', 'Pm')
pa = absorv_dom_a_vcorr_2000_2017[,-1] / absorv_dom_a_vcon_2000_2017[,-1]
pa = data.frame(absorv_dom_a_vcorr_2000_2017[,1], pa)
colnames(pa) = c('Período', 'Pa')
p_pib = pib_a_vcorr_2000_2017[,-1] / pib_a_vcon_2000_2017
p_pib = data.frame(pib_a_vcorr_2000_2017[,1], p_pib)
colnames(px) = c('Período', 'Ppib')
#Cálculo Pa calculado
saa = absorv_dom_a_vcorr_2000_2017[,-1] / pib_a_vcorr_2000_2017[,-1]
saa = data.frame(absorv_dom_a_vcorr_2000_2017[,1], saa)
p_pib_saa = p_pib[,-1] * saa[,-1]
p_pib_saa = data.frame(p_pib[,1], p_pib_saa)
sx = export_a_vcorr_2000_2017[,-1] / pib_a_vcorr_2000_2017[,-1]
sx = data.frame(export_a_vcorr_2000_2017[,1], sx)
sm = (import_a_vcorr_2000_2017[,-1] / pib_a_vcorr_2000_2017[,-1])*-1
sm = data.frame(import_a_vcorr_2000_2017[,1], sm)
sxpx_smpx = (sx[,-1]/px[,-1]) - (sm[,-1]/pm[,-1])
sxpx_smpx = data.frame(sx[,1] , sxpx_smpx)
pa_calc = p_pib_saa[,-1] / (1 - p_pib[,-1] * sxpx_smpx[,-1])
pa_calc = data.frame(p_pib_saa[,1], pa_calc)
colnames(pa_calc) = c("Período", "Pa calculado")
p_tradables_mgeo = data.frame(px$Período ,sqrt(px$Px * pm$Pm))
colnames(p_tradables_mgeo) = c("Período", "P_tradables (m.geo)")
pa_calc = p_pib_saa[,-1] / (1 - p_pib[,-1] * sxpx_smpx[,-1])
p_pib[,-1]
sxpx_smpx[,-1]
p_pib = pib_a_vcorr_2000_2017[,-1] / pib_a_vcon_2000_2017
p_pib = data.frame(pib_a_vcorr_2000_2017[,1], p_pib)
colnames(px) = c('Período', 'Ppib')
View(p_pib)
rm(p_pib)
p_pib = pib_a_vcorr_2000_2017[,-1] / pib_a_vcon_2000_2017
p_pib = data.frame(pib_a_vcorr_2000_2017[,1], p_pib)
colnames(px) = c('Período', 'Ppib')
pa_calc = p_pib_saa[,-1] / (1 - p_pib[,-1] * sxpx_smpx[,-1])
pa_calc = data.frame(p_pib_saa[,1], pa_calc)
colnames(pa_calc) = c("Período", "Pa calculado")
p_pib = pib_a_vcorr_2000_2017[,-1] / pib_a_vcon_2000_2017
p_pib = data.frame(pib_a_vcorr_2000_2017[,1], p_pib)
colnames(px) = c('Período', 'Ppib')
p_pib = pib_a_vcorr_2000_2017[,-1] / pib_a_vcon_2000_2017
p_pib = data.frame(pib_a_vcorr_2000_2017[,1], p_pib)
colnames(px) = c('Período', 'Ppib')
p_pib = pib_a_vcorr_2000_2017[,-1] / pib_a_vcon_2000_2017 [,-1]
p_pib = data.frame(pib_a_vcorr_2000_2017[,1], p_pib)
colnames(px) = c('Período', 'Ppib')
pa_calc = p_pib_saa[,-1] / (1 - p_pib[,-1] * sxpx_smpx[,-1])
pa_calc = data.frame(p_pib_saa[,1], pa_calc)
colnames(pa_calc) = c("Período", "Pa calculado")
p_tradables_mgeo = data.frame(px$Período ,sqrt(px$Px * pm$Pm))
colnames(p_tradables_mgeo) = c("Período", "P_tradables (m.geo)")
px$Px
View(px)
colnames(p_pib) = c('Período', 'Ppib')
colnames(px) = c('Período', 'Px')
p_tradables_mgeo = data.frame(px$Período ,sqrt(px$Px * pm$Pm))
colnames(p_tradables_mgeo) = c("Período", "P_tradables (m.geo)")
px_pc = export_a_vcorr_2000_2017[,-1] / export_a_vcon_2000_2017[,-1]
px_pc = data.frame(export_a_vcorr_2000_2017[,1], px_pc)
colnames(px_pc) = c('Período', 'Px')
pm_pc = import_a_vcorr_2000_2017[,-1] / import_a_vcon_2000_2017[,-1]
pm_pc = data.frame(import_a_vcorr_2000_2017[,1], pm_pc)
colnames(pm_pc) = c('Período', 'Pm')
[,-1] / absorv_dom_a_vcon_2000_2017[,-1]
pa_pc = data.frame(absorv_dom_a_vcorr_2000_2017[,1], pa_pc)
colnames(pa_pc) = c('Período', 'Pa')
pm_pc = import_a_vcorr_2000_2017[,-1] / import_a_vcon_2000_2017[,-1]
pm_pc = data.frame(import_a_vcorr_2000_2017[,1], pm_pc)
colnames(pm_pc) = c('Período', 'Pm')
pa_pc = absorv_dom_a_vcorr_2000_2017[,-1] / absorv_dom_a_vcon_2000_2017[,-1]
pa_pc = data.frame(absorv_dom_a_vcorr_2000_2017[,1], pa_pc)
colnames(pa_pc) = c('Período', 'Pa')
p_pib_pc = pib_a_vcorr_2000_2017[,-1] / pib_a_vcon_2000_2017 [,-1]
p_pib_pc = data.frame(pib_a_vcorr_2000_2017[,1], p_pib_pc)
colnames(p_pib_pc) = c('Período', 'Ppib')
saa_pc = absorv_dom_a_vcorr_2000_2017[,-1] / pib_a_vcorr_2000_2017[,-1]
saa_pc = data.frame(absorv_dom_a_vcorr_2000_2017[,1], saa_pc)
p_pib_saa_pc = p_pib_pc[,-1] * saa_pc[,-1]
p_pib_saa_pc = data.frame(p_pib_pc[,1], p_pib_saa_pc)
#Rotina para calcular a renda interna bruta
#Feito por: Felipe Simplício Ferreira
#última atualização: 06/12/2019
#Definindo diretórios a serem utilizados
getwd()
setwd("C:\\Users\\User\\Documents\\GitHub\\rentainternabruta")
#Carregando pacotes que serão utilizados
library(readxl)
#Carregando arquivo das contas trimestrais
tabela_ca_2000_2017= read_excel("dados.xlsx", sheet = "Anual_2000-2017 (ref2010)")
tabela_ct_1996_2018 = read_excel("dados.xlsx", sheet = "Trimestral_1996-2018 (ref2010)")
tabela_ca_1990_2000 = read_excel("dados.xlsx", sheet = "Anual_1990-2000 (ref1985e2000)")
tabela_ca_1947_1989 = read_excel("dados.xlsx", sheet = "Anual_1947-1989 (ref1987)")
#valores correntes
arrumar_tabelas = function(df_entrada ,df_saida, qtd_colunas){
df_saida = data.frame(df_entrada[,1], df_entrada[,qtd_colunas])
colnames(df_saida) = df_saida[1,]
df_saida = df_saida[-1,]
df_saida[,-1] = apply(df_saida[,-1],2,function(x)as.numeric(gsub(",",".",x)))
return(df_saida)
}
tabela_ca_2000_2017_vcorr = arrumar_tabelas(tabela_ca_2000_2017, tabela_ca_2000_2017_vcorr, 2:10)
separa_colunas = function(data, nome_coluna, df_entrada){
df_saida = df_entrada[,c(data, nome_coluna)]
return(df_saida)
}
pib_a_vcorr_2000_2017 = separa_colunas('Período', 'PIB', tabela_ca_2000_2017_vcorr)
consumo_familias_a_vcorr_2000_2017 = separa_colunas('Período', 'Consumo das Famílias', tabela_ca_2000_2017_vcorr)
consumo_governo_a_vcorr_2000_2017 = separa_colunas('Período', 'Consumo do Governo', tabela_ca_2000_2017_vcorr)
fbkf_a_vcorr_2000_2017 = separa_colunas('Período', 'Formação Bruta de Capital Fixo', tabela_ca_2000_2017_vcorr)
export_a_vcorr_2000_2017 = separa_colunas('Período', 'Exportação', tabela_ca_2000_2017_vcorr)
import_a_vcorr_2000_2017 = separa_colunas('Período', 'Importação', tabela_ca_2000_2017_vcorr)
absorv_dom_a_vcorr_2000_2017 = separa_colunas('Período', 'Absorção Doméstica', tabela_ca_2000_2017_vcorr)
#Valor constantes
tabela_ca_2000_2017_vcon = arrumar_tabelas(tabela_ca_2000_2017, tabela_ca_2000_2017_vcon, 11:19)
pib_a_vcon_2000_2017 = separa_colunas('Período', 'PIB = PIB a preços do ano anterior', tabela_ca_2000_2017_vcon)
consumo_familias_a_vcon_2000_2017 = separa_colunas('Período', 'Consumo das Famílias', tabela_ca_2000_2017_vcon)
consumo_governo_a_vcon_2000_2017 = separa_colunas('Período', 'Consumo do Governo', tabela_ca_2000_2017_vcon)
fbkf_a_vcon_2000_2017 = separa_colunas('Período', 'Formação Bruta de Capital Fixo', tabela_ca_2000_2017_vcon)
export_a_vcon_2000_2017 = separa_colunas('Período', 'Exportação', tabela_ca_2000_2017_vcon)
import_a_vcon_2000_2017 = separa_colunas('Período', 'Importação', tabela_ca_2000_2017_vcon)
absorv_dom_a_vcon_2000_2017 = separa_colunas('Período', 'Absorção Doméstica', tabela_ca_2000_2017_vcon)
#Deflatores com valores constantes
px_pc = export_a_vcorr_2000_2017[,-1] / export_a_vcon_2000_2017[,-1]
px_pc = data.frame(export_a_vcorr_2000_2017[,1], px_pc)
colnames(px_pc) = c('Período', 'Px')
pm_pc = import_a_vcorr_2000_2017[,-1] / import_a_vcon_2000_2017[,-1]
pm_pc = data.frame(import_a_vcorr_2000_2017[,1], pm_pc)
colnames(pm_pc) = c('Período', 'Pm')
pa_pc = absorv_dom_a_vcorr_2000_2017[,-1] / absorv_dom_a_vcon_2000_2017[,-1]
pa_pc = data.frame(absorv_dom_a_vcorr_2000_2017[,1], pa_pc)
colnames(pa_pc) = c('Período', 'Pa')
p_pib_pc = pib_a_vcorr_2000_2017[,-1] / pib_a_vcon_2000_2017 [,-1]
p_pib_pc = data.frame(pib_a_vcorr_2000_2017[,1], p_pib_pc)
colnames(p_pib_pc) = c('Período', 'Ppib')
#Cálculo Pa calculado
saa_pc = absorv_dom_a_vcorr_2000_2017[,-1] / pib_a_vcorr_2000_2017[,-1]
saa_pc = data.frame(absorv_dom_a_vcorr_2000_2017[,1], saa_pc)
p_pib_saa_pc = p_pib_pc[,-1] * saa_pc[,-1]
p_pib_saa_pc = data.frame(p_pib_pc[,1], p_pib_saa_pc)
sx_pc = export_a_vcorr_2000_2017[,-1] / pib_a_vcorr_2000_2017[,-1]
sx_pc = data.frame(export_a_vcorr_2000_2017[,1], sx_pc)
sm_pc = (import_a_vcorr_2000_2017[,-1] / pib_a_vcorr_2000_2017[,-1])*-1
sm_pc = data.frame(import_a_vcorr_2000_2017[,1], sm_pc)
sxpx_smpx_pc = (sx_pc[,-1]/px_pc[,-1]) - (sm_pc[,-1]/pm_pc[,-1])
sxpx_smpx_pc = data.frame(sx_pc[,1] , sxpx_smpx_pc)
pa_calc_pc = p_pib_saa_pc[,-1] / (1 - p_pib_pc[,-1] * sxpx_smpx_pc[,-1])
pa_calc_pc = data.frame(p_pib_saa_pc[,1], pa_calc_pc)
colnames(pa_calc_pc) = c("Período", "Pa calculado")
p_tradables_mgeo_pc = data.frame(px_pc$Período ,sqrt(px_pc$Px * pm_pc$Pm))
colnames(p_tradables_mgeo_pc) = c("Período", "P_tradables (m.geo)")
a
p_relativos_pc = p_tradables_mgeo_pc[,-1] / pa_pc[,-1]
p_relativos_pc = data.frame(px_pc[,1], p_relativos_pc)
prt_pa_calc_pc = p_tradables_mgeo_pc[,-1] / pa_calc_pc[,-1]
prt_pa_calc_pc = data.frame(p_tradables_mgeo[,1] , prt_pa_calc_pc)
var_pib_1_pc = pib_a_vcorr_2000_2017[,1]
for (i in 2:dim(pib_a_vcorr_2000_2017)[1]){
var_pib_1_pc[i,2] = pib_a_vcon_2000_2017[i,-1] / pib_a_vcorr_2000_2017[i-1,-1]
}
tt_pc = px_pc[,-1] / pm_pc[,-1]
tt_pc = data.frame(px_pc[,1], tt_pc)
x_m_pc = export_a_vcorr_2000_2017[,-1] + import_a_vcorr_2000_2017[,-1]
x_m_pc = data.frame(export_a_vcorr_2000_2017[,1] , x_m_pc)
x_m_pa_pc = x_m_pc[,-1] / pa_pc[,-1]
x_m_pa_pc = data.frame(x_m_pc[,1], x_m_pa_pc)
x_px_pc = export_a_vcorr_2000_2017[,-1] / px_pc[,-1]
x_px_pc = data.frame(export_a_vcorr_2000_2017[,1], x_px_pc)
m_pm_pc = -import_a_vcorr_2000_2017[,-1] / pm_pc[,-1]
m_pm_pc = data.frame(import_a_vcorr_2000_2017[,1], m_pm_pc)
xpx_mpm_pc = x_px_pc[,-1] - m_pm_pc[,-1]
xpx_mpm_pc = data.frame(x_px_pc[,1], xpx_mpm_pc)
gc_pc = x_m_pa_pc[,-1] - xpx_mpm_pc[,-1]
gc_pc = data.frame(x_m_pa_pc[,1], gc_pc)
gc_pib_pc = gc_pc[,-1] / pib_a_vcon_2000_2017[,-1]
gc_pib_pc = data.frame(gc_pc[,1], gc_pib_pc)
rib_p_anoanterior_pc = gc_pc[,-1] + pib_a_vcon_2000_2017[,-1]
rib_p_anoanterior_pc = data.frame(gc_pc[,1], rib_p_anoanterior_pc)
var_rib_1_pc = pib_a_vcorr_2000_2017[,1]
for (i in 2:dim(pib_a_vcorr_2000_2017)[1]){
var_rib_1_pc[i,2] = rib_p_anoanterior[i,-1] / pib_a_vcorr_2000_2017[i-1,-1]
}
ind_pib_pc = var_pib_1_pc[,1]
for (i in 2:dim(var_pib_1_pc)[1]){
ind_pib_pc[1,2] = 100
ind_pib_pc[i,2] = ind_pib_pc[i-1,2]*var_pib_1_pc[i,2]
}
ind_rib_pc = var_rib_1_pc[,1]
for (i in 2:dim(var_rib_1_pc)[1]){
ind_rib_pc[1,2] = 100
ind_rib_pc[i,2] = ind_rib_pc[i-1,2]*var_rib_1_pc[i,2]
}
ind_rib_pib_pc = (ind_rib_pc[,-1] / ind_pib_pc[,-1])*100
ind_rib_pib_pc = data.frame(ind_rib_pc[,1], ind_rib_pib_pc)
prt_pa_calc_pc = p_tradables_mgeo_pc[,-1] / pa_calc_pc[,-1]
prt_pa_calc_pc = data.frame(p_tradables_mgeo_pc[,1] , prt_pa_calc_pc)
var_pib_1_pc = pib_a_vcorr_2000_2017[,1]
for (i in 2:dim(pib_a_vcorr_2000_2017)[1]){
var_pib_1_pc[i,2] = pib_a_vcon_2000_2017[i,-1] / pib_a_vcorr_2000_2017[i-1,-1]
}
var_pib_1_pc = pib_a_vcorr_2000_2017[,1]
for (i in 2:dim(pib_a_vcorr_2000_2017)[1]){
var_pib_1_pc[i,2] = pib_a_vcon_2000_2017[i,-1] / pib_a_vcorr_2000_2017[i-1,-1]
}
pib_a_vcon_2000_2017[2,-1]
pib_a_vcon_2000_2017[2,-1]
pib_a_vcorr_2000_2017[1,-1]
var_pib_1_pc = pib_a_vcorr_2000_2017[,1]
for (i in 2:dim(pib_a_vcorr_2000_2017)[1]){
var_pib_1_pc[i,2] = pib_a_vcon_2000_2017[i,-1] / pib_a_vcorr_2000_2017[i-1,-1]
}
var_pib_1_pc = pib_a_vcorr_2000_2017[,1]
for (i in 2:dim(pib_a_vcorr_2000_2017)[1]){
var_pib_1_pc[i,2] = pib_a_vcon_2000_2017[i,-1] / pib_a_vcorr_2000_2017[(i-1),-1]
}
pib_a_vcon_2000_2017[2,-1] / pib_a_vcorr_2000_2017[1,-1]
var_pib_1_pc[2,2]
var_pib_1_pc[2,2] = pib_a_vcon_2000_2017[2,-1] / pib_a_vcorr_2000_2017[1,-1]
var_pib_1_pc = pib_a_vcorr_2000_2017[,1]
var_pib_1_pc = pib_a_vcorr_2000_2017
for (i in 2:dim(pib_a_vcorr_2000_2017)[1]){
var_pib_1_pc[i,2] = pib_a_vcon_2000_2017[i,-1] / pib_a_vcorr_2000_2017[i-1,-1]
}
View(var_pib_1_pc)
tt_pc = px_pc[,-1] / pm_pc[,-1]
tt_pc = data.frame(px_pc[,1], tt_pc)
x_m_pc = export_a_vcorr_2000_2017[,-1] + import_a_vcorr_2000_2017[,-1]
x_m_pc = data.frame(export_a_vcorr_2000_2017[,1] , x_m_pc)
x_m_pa_pc = x_m_pc[,-1] / pa_pc[,-1]
x_m_pa_pc = data.frame(x_m_pc[,1], x_m_pa_pc)
x_px_pc = export_a_vcorr_2000_2017[,-1] / px_pc[,-1]
x_px_pc = data.frame(export_a_vcorr_2000_2017[,1], x_px_pc)
m_pm_pc = -import_a_vcorr_2000_2017[,-1] / pm_pc[,-1]
m_pm_pc = data.frame(import_a_vcorr_2000_2017[,1], m_pm_pc)
xpx_mpm_pc = x_px_pc[,-1] - m_pm_pc[,-1]
xpx_mpm_pc = data.frame(x_px_pc[,1], xpx_mpm_pc)
gc_pc = x_m_pa_pc[,-1] - xpx_mpm_pc[,-1]
gc_pc = data.frame(x_m_pa_pc[,1], gc_pc)
gc_pib_pc = gc_pc[,-1] / pib_a_vcon_2000_2017[,-1]
gc_pib_pc = data.frame(gc_pc[,1], gc_pib_pc)
rib_p_anoanterior_pc = gc_pc[,-1] + pib_a_vcon_2000_2017[,-1]
rib_p_anoanterior_pc = data.frame(gc_pc[,1], rib_p_anoanterior_pc)
var_rib_1_pc = pib_a_vcorr_2000_2017
for (i in 2:dim(pib_a_vcorr_2000_2017)[1]){
var_rib_1_pc[i,2] = rib_p_anoanterior[i,-1] / pib_a_vcorr_2000_2017[i-1,-1]
}
var_rib_1_pc = pib_a_vcorr_2000_2017
for (i in 2:dim(pib_a_vcorr_2000_2017)[1]){
var_rib_1_pc[i,2] = rib_p_anoanterior_pc[i,-1] / pib_a_vcorr_2000_2017[i-1,-1]
}
ind_pib_pc = var_pib_1_pc
for (i in 2:dim(var_pib_1_pc)[1]){
ind_pib_pc[1,2] = 100
ind_pib_pc[i,2] = ind_pib_pc[i-1,2]*var_pib_1_pc[i,2]
}
ind_rib_pc = var_rib_1_pc
for (i in 2:dim(var_rib_1_pc)[1]){
ind_rib_pc[1,2] = 100
ind_rib_pc[i,2] = ind_rib_pc[i-1,2]*var_rib_1_pc[i,2]
}
ind_rib_pib_pc = data.frame(ind_rib_pc[,1], ind_rib_pib_pc)
ind_rib_pib_pc = (ind_rib_pc[,-1] / ind_pib_pc[,-1])*100
ind_rib_pib_pc = data.frame(ind_rib_pc[,1], ind_rib_pib_pc)
#Rotina para calcular a renda interna bruta
#Feito por: Felipe Simplício Ferreira
#última atualização: 06/12/2019
#Definindo diretórios a serem utilizados
getwd()
setwd("C:\\Users\\User\\Documents\\GitHub\\rentainternabruta")
#Carregando pacotes que serão utilizados
library(readxl)
#Funções
arrumar_tabelas = function(df_entrada ,df_saida, qtd_colunas){
df_saida = data.frame(df_entrada[,1], df_entrada[,qtd_colunas])
colnames(df_saida) = df_saida[1,]
df_saida = df_saida[-1,]
df_saida[,-1] = apply(df_saida[,-1],2,function(x)as.numeric(gsub(",",".",x)))
return(df_saida)
}
separa_colunas = function(data, nome_coluna, df_entrada){
df_saida = df_entrada[,c(data, nome_coluna)]
return(df_saida)
}
######PARTE 1######
#Carregando dados anuais 2000-2017 (ref 2010)
tabela_ca_2000_2017= read_excel("dados.xlsx", sheet = "Anual_2000-2017 (ref2010)")
View(tabela_ca_2000_2017)
View(tabela_ca_2000_2017)
tabela_ct_1996_2018_vcorr = arrumar_tabelas(tabela_ct_1996_2018, tabela_ct_1996_2018_vcorr, 2:10)
#Carregando arquivo das contas trimestrais 1996-2018 (ref 2010)
tabela_ct_1996_2018 = read_excel("dados.xlsx", sheet = "Trimestral_1996-2018 (ref2010)")
#Valores correntes
tabela_ct_1996_2018_vcorr = arrumar_tabelas(tabela_ct_1996_2018, tabela_ct_1996_2018_vcorr, 2:10)
View(tabela_ct_1996_2018_vcorr)
View(tabela_ct_1996_2018)
tabela_ca_2000_2017_vcorr = arrumar_tabelas(tabela_ca_2000_2017, tabela_ca_2000_2017_vcorr, 2:9)
View(tabela_ct_1996_2018_vcorr)
######PARTE 2######
#Carregando dados anuais 2000-2017 (ref 2010)
tabela_ca_2000_2017= read_excel("dados.xlsx", sheet = "Anual_2000-2017 (ref2010)")
#valores correntes
tabela_ca_2000_2017_vcorr = arrumar_tabelas(tabela_ca_2000_2017, tabela_ca_2000_2017_vcorr, 2:9)
View(tabela_ca_2000_2017_vcorr)
#Rotina para calcular a renda interna bruta
#Feito por: Felipe Simplício Ferreira
#última atualização: 06/12/2019
#Definindo diretórios a serem utilizados
getwd()
setwd("C:\\Users\\User\\Documents\\GitHub\\rentainternabruta")
#Carregando pacotes que serão utilizados
library(readxl)
#Funções
arrumar_tabelas = function(df_entrada ,df_saida, qtd_colunas){
df_saida = data.frame(df_entrada[,1], df_entrada[,qtd_colunas])
colnames(df_saida) = df_saida[1,]
df_saida = df_saida[-1,]
df_saida[,-1] = apply(df_saida[,-1],2,function(x)as.numeric(gsub(",",".",x)))
return(df_saida)
}
separa_colunas = function(data, nome_coluna, df_entrada){
df_saida = df_entrada[,c(data, nome_coluna)]
return(df_saida)
}
tabela_ca_1990_2000 = read_excel("dados.xlsx", sheet = "Anual_1990-2000 (ref1985e2000)")
tabela_ca_1947_1989 = read_excel("dados.xlsx", sheet = "Anual_1947-1989 (ref1987)")
######PARTE 1######
#Carregando arquivo das contas trimestrais 1996-2018 (ref 2010)
tabela_ct_1996_2018 = read_excel("dados.xlsx", sheet = "Trimestral_1996-2018 (ref2010)")
#Valores correntes
tabela_ct_1996_2018_vcorr = arrumar_tabelas(tabela_ct_1996_2018, tabela_ct_1996_2018_vcorr, 2:9)
#Rotina para calcular a renda interna bruta
#Feito por: Felipe Simplício Ferreira
#última atualização: 06/12/2019
#Definindo diretórios a serem utilizados
getwd()
setwd("C:\\Users\\User\\Documents\\GitHub\\rentainternabruta")
#Carregando pacotes que serão utilizados
library(readxl)
#Funções
arrumar_tabelas = function(df_entrada ,df_saida, qtd_colunas){
df_saida = data.frame(df_entrada[,1], df_entrada[,qtd_colunas])
colnames(df_saida) = df_saida[1,]
df_saida = df_saida[-1,]
df_saida[,-1] = apply(df_saida[,-1],2,function(x)as.numeric(gsub(",",".",x)))
return(df_saida)
}
separa_colunas = function(data, nome_coluna, df_entrada){
df_saida = df_entrada[,c(data, nome_coluna)]
return(df_saida)
}
#tabela_ca_1990_2000 = read_excel("dados.xlsx", sheet = "Anual_1990-2000 (ref1985e2000)")
#tabela_ca_1947_1989 = read_excel("dados.xlsx", sheet = "Anual_1947-1989 (ref1987)")
######PARTE 1######
#Carregando arquivo das contas trimestrais 1996-2018 (ref 2010)
tabela_ct_1996_2018 = read_excel("dados.xlsx", sheet = "Trimestral_1996-2018 (ref2010)")
#Valores correntes
tabela_ct_1996_2018_vcorr = arrumar_tabelas(tabela_ct_1996_2018, tabela_ct_1996_2018_vcorr, 2:9)
View(tabela_ct_1996_2018)
View(tabela_ct_1996_2018_vcorr)
View(tabela_ct_1996_2018)
View(tabela_ct_1996_2018_vcorr)
pib_a_vcorr_1996_2018 = separa_colunas('Período', 'PIB', tabela_ca_2000_2017_vcorr)
consumo_familias_a_vcorr_1996_2018 = separa_colunas('Período', 'Consumo das Famílias', tabela_ct_2000_2017_vcorr)
consumo_governo_a_vcorr_1996_2018 = separa_colunas('Período', 'Consumo do Governo', tabela_ct_2000_2017_vcorr)
fbkf_a_vcorr_1996_2018 = separa_colunas('Período', 'Formação Bruta de Capital Fixo', tabela_ct_2000_2017_vcorr)
export_a_vcorr_1996_2018 = separa_colunas('Período', 'Exportação', tabela_ct_2000_2017_vcorr)
import_a_vcorr_1996_2018 = separa_colunas('Período', 'Importação', tabela_ct_2000_2017_vcorr)
var_est_a_vcorr_1996_2018 = separa_colunas('Período', 'Variação de Estoques', tabela_ct_2000_2017_vcorr)
pib_a_vcorr_1996_2018 = separa_colunas('Período', 'PIB', tabela_ct_1996_2018_vcorr)
consumo_familias_a_vcorr_1996_2018 = separa_colunas('Período', 'Consumo das Famílias', tabela_ct_1996_2018_vcorr)
consumo_governo_a_vcorr_1996_2018 = separa_colunas('Período', 'Consumo do Governo', tabela_ct_1996_2018_vcorr)
fbkf_a_vcorr_1996_2018 = separa_colunas('Período', 'Formação Bruta de Capital Fixo', tabela_ct_1996_2018_vcorr)
export_a_vcorr_1996_2018 = separa_colunas('Período', 'Exportação', tabela_ct_1996_2018_vcorr)
import_a_vcorr_1996_2018 = separa_colunas('Período', 'Importação', tabela_ct_1996_2018_vcorr)
var_est_a_vcorr_1996_2018 = separa_colunas('Período', 'Variação de Estoques', tabela_ct_1996_2018_vcorr)
View(consumo_familias_a_vcorr_1996_2018)
